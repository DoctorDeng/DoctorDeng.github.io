{
  "name": "JavaEE基础知识整理",
  "tagline": "Doctor邓的博客",
  "body": "## 1、线程、进程的基本概念和它们之间的区别。\r\n**线程的基本概念**\r\n* 线程是进程中执行运算的最小单位，是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。\r\n\r\n**进程的基本概念**\r\n* 进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。\r\n* 进程的概念主要有两点：\r\n   第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。\r\n   第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。\r\n\r\n**进程和线程的区别**\r\n* 调度：线程作为`CPU`调度和分配的基本单位，进程作为`操作系统`分配资源的基本单位。\r\n* 拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源（或只拥有比不可少的资源，如程序计数器,一组寄存器和栈），但可以访问隶属于进程的资源，即与其他线程共享资源。\r\n* 系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。\r\n* 进程可以独立运行，线程必须依赖进程运行\r\n* 一个程序至少有一个进程,一个进程至少有一个线程。\r\n\r\n**线程和进程的优缺点**\r\n* 线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。\r\n## 2、Java中线程的几种状态、并作详细说明。\r\n* 创建（new）：\r\n    通过New关键字创建了Thread类（或其子类）的对象，此时并没有调用对象的`start()`方法。\r\n* 就绪（runnable）：\r\n    调用`start()`方法后，运行`run()`方法之前，等待获取`CPU`的使用权。\r\n* 运行（running）：\r\n    `就绪`状态的线程获取了`CPU时间片`，执行程序代码。\r\n* 阻塞（blocked）：\r\n    阻塞状态是指线程因为某种原因放弃了 `cpu`  使用权，也即让出了  `cpu timeslice` ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 `cpu timeslice`  转到运行( running )状态。阻塞的情况分三种：\r\n(一). 等待阻塞：运行( running )的线程执行 `wait ()`方法， JVM 会把该线程放 入等待队列( waitting queue )中。\r\n(二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。\r\n(三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join  ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。            \r\n当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。\r\n* 消亡（dead）：\r\n线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。\r\n> 注意：`sleep(long mills)`：会释放CPU资源，但不会释放锁。`wait()`：会释放CPU资源和锁资源。\r\n**参考图示：**\r\n\r\n\r\n \r\n \r\n## 3、`volatile`关键字说明。\r\n**`volatile`关键字用在多线程同步中，可保证读取的可见性，JVM只是保证从主内存加载到线程工作内存的值是最新的读取值，而非cache中。\r\n但多个线程对volatile的写操作，无法保证线程安全。例如假如线程1，线程2 在进行read,load 操作中，发现主内存中count的值都是5，\r\n那么都会加载这个最新的值，在线程1堆count进行修改之后，会write到主内存中，主内存中的count变量就会变为6；线程2由于已经进行read,load操作，\r\n在进行运算之后，也会更新主内存count的变量值为6；导致两个线程及时用volatile关键字修改之后，还是会存在并发的情况。**\r\n## 4、Java集合泛型类关系图。\r\n\r\n\r\n\r\n \r\n## 5、Collection 和 Collections的区别？\r\n**Collection是一个接口，所有的集合类（除Map外）都要继承（实现）自该接口。它提供了对集合对象进行基本操作的通用接口方法。\r\nCollections是一个包装类，它包含有各种有关集合操作的静态多态方法。（Collections是一个工具类，不能实例化）**\r\n## 6、Java流类图结构。\r\n\r\n## 7、访问修饰符public,private,protected,以及不写（默认）时的区别？\r\n修饰符\t当前类\t同 包\t子 类\t其他包\r\npublic\t√\t√\t√\t√\r\nprotected\t√\t√\t√\t×\r\ndefault\t√\t√\t×\t×\r\nprivate\t√\t×\t×\t×\r\n \r\n## 8、int和Integer有什么区别？\r\nJava是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作，Java为每一个基本数据类型都引入了对应的包装类型（wrapper class），int的包装类就是Integer，从Java 5开始引入了自动装箱/拆箱机制，使得二者可以相互转换。\r\nJava 为每个原始类型提供了包装类型：\r\n* 原始类型: boolean，char，byte，short，int，long，float，double\r\n* 包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double\r\n** 扩展：说明下列代码的输出结果（结果：true,false）\r\n```\r\npublic class Test03 {\r\n    public static void main(String[] args) {\r\n        Integer f1 = 100, f2 = 100, f3 = 150, f4 = 150;\r\n        System.out.println(f1 == f2);\r\n        System.out.println(f3 == f4);\r\n    }\r\n}\r\n```\r\n**解析**：\r\n如果不明就里很容易认为两个输出要么都是true要么都是false。首先需要注意的是f1、f2、f3、f4四个变量都是Integer对象引用，所以下面的==运算比较的不是值而是引用。\r\n装箱的本质是什么呢？当我们给一个Integer对象赋一个int值的时候，会调用Integer类的静态方法valueOf，如果看看valueOf的源代码就知道发生了什么。\r\n```\r\npublic static Integer valueOf(int i) {\r\n        if (i >= IntegerCache.low && i <= IntegerCache.high)\r\n            return IntegerCache.cache[i + (-IntegerCache.low)];\r\n        return new Integer(i);\r\n    }\r\n```\r\n`IntegerCache` 是Integer的内部类，其代码如下所示：\r\n```\r\n/**\r\n     * Cache to support the object identity semantics of autoboxing for values between\r\n     * -128 and 127 (inclusive) as required by JLS.\r\n     *\r\n     * The cache is initialized on first usage.  The size of the cache\r\n     * may be controlled by the {@code -XX:AutoBoxCacheMax=<size>} option.\r\n     * During VM initialization, java.lang.Integer.IntegerCache.high property\r\n     * may be set and saved in the private system properties in the\r\n     * sun.misc.VM class.\r\n     */\r\n \r\n    private static class IntegerCache {\r\n        static final int low = -128;\r\n        static final int high;\r\n        static final Integer cache[];\r\n \r\n        static {\r\n            // high value may be configured by property\r\n            int h = 127;\r\n            String integerCacheHighPropValue =\r\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\r\n            if (integerCacheHighPropValue != null) {\r\n                try {\r\n                    int i = parseInt(integerCacheHighPropValue);\r\n                    i = Math.max(i, 127);\r\n                    // Maximum array size is Integer.MAX_VALUE\r\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\r\n                } catch( NumberFormatException nfe) {\r\n                    // If the property cannot be parsed into an int, ignore it.\r\n                }\r\n            }\r\n            high = h;\r\n \r\n            cache = new Integer[(high - low) + 1];\r\n            int j = low;\r\n            for(int k = 0; k < cache.length; k++)\r\n                cache[k] = new Integer(j++);\r\n \r\n            // range [-128, 127] must be interned (JLS7 5.1.7)\r\n            assert IntegerCache.high >= 127;\r\n        }\r\n \r\n        private IntegerCache() {}\r\n    }\r\n```\r\n简单的说，如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象，所以上面的面试题中f1==f2的结果是true，而f3==f4的结果是false。\r\n## 9、&和&&的区别？\r\n&运算符有两种用法：(1)按位与；(2)逻辑与。\r\n  &&运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true整个表达式的值才是true。&&之所以称为短路运算是因为，如果&&左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&&而不是&，例如在验证用户登录时判定用户名不是null而且不是空字符串，应当写为：username != null &&!username.equals(\"\")，二者的顺序不能交换，更不能用&运算符，因为第一个条件如果不成立，根本不能进行字符串的equals比较，否则会产生NullPointerException异常。注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。\r\n## 10、什么是死锁？产生死锁的原因是什么？解决死锁的方法有哪些？\r\n**死锁定义**\r\n 是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。\r\n\r\n**死锁发生的四个必要条件**\r\n* 互斥条件：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。\r\n* 请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。\r\n* 剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。\r\n* 环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。\r\n\r\n**产生原因**\r\n* 系统资源的竞争\r\n通常系统中拥有的不可剥夺资源，其数量不足以满足多个进程运行的需要，使得进程在 运行过程中，会因争夺资源而陷入僵局，如磁带机、打印机等。只有对不可剥夺资源的竞争 才可能产生死锁，对可剥夺资源的竞争是不会引起死锁的。\r\n> `竞争不可抢占性资源引起死锁`：通常系统中所拥有的不可抢占性资源其数量不足以满足多个进程的运行需要，使得进程在运行过程中，会因争夺资源而陷入僵局。\r\n* 进程推进顺序不当引起死锁\r\n   进程在运行过程中，请求和释放资源的顺序不当，也同样会导致死锁。例如，并发进程 P1、P2分别保持了资源R1、R2，而进程P1申请资源R2，进程P2申请资源R1时，两者都 会因为所需资源被占用而阻塞。\r\n   信号量使用不当也会造成死锁。进程间彼此相互等待对方发来的消息，结果也会使得这 些进程间无法继续向前推进。例如，进程A等待进程B发的消息，进程B又在等待进程A 发的消息，可以看出进程A和B不是因为竞争同一资源，而是在等待对方的资源导致死锁\r\n\r\n**死锁处理策略**\r\n* 预防死锁\r\n设置某些限制条件，破坏产生死锁的四个必要条件中的一个或几个，以防止发生死锁。\r\n* 避免死锁\r\n在资源的动态分配过程中，用某种方法防止系统进入不安全状态，从而避免死锁。\r\n* 死锁的检测及解除\r\n无需釆取任何限制性措施，允许进程在运行过程中发生死锁。通过系统的检测机构及时 地检测出死锁的发生，然后釆取某种措施解除死锁。\r\n预防死锁和避免死锁都属于事先预防策略，但预防死锁的限制条件比较严格，实现起来 较为简单，但往往导致系统的效率低，资源利用率低；避免死锁的限制条件相对宽松，资源 分配后需要通过算法来判断是否进入不安全状态，实现起来较为复杂。\r\n死锁处理策略\t各种可能模式\t主要优点\t主要缺点\r\n死锁预防\t保守，宁可资源闲置\t一次请求所有资源，资 源剥夺，资源按序分配\t适用于做突发式处理 的进程，不必进行剥夺\t效率低，进程初始化时 间延长；剥夺次数过多； 不便灵活申请新资源\r\n死锁避免\t是”预防“和”检测“ 的折中（在运行时判断是 否可能死锁）\t寻找可能的安全允许 顺序\t不必进行剥夺\t必须知道将来的资源 需求；进程不能被长时间 阻塞\r\n死锁检测\t宽松，只要允许就分配 资源\t定期检查死锁是否已 经发生\t不延长进程初始化时 间，允许对死锁进行现场 处理\t通过剥夺解除死锁，造 成损失\r\n## 11、String和StringBuilder、StringBuffer的区别？\r\n* String是只读字符串，即不可变字符串。StringBuilder/StringBuffer的可变字符串，底层基于数组的方式实现。\r\n* 在对字符串进行操作（修改）时，String会产生新的对象，而StringBuilder/StringBuffer不会。\r\n* 由于在对字符串进行操作时，StringBuilder/StringBuffer不会产生新的对象，这样在频繁的对字符串进行修改等操作时，StringBuilder/StringBuffer效率更高。\r\n* StringBuilder线程不安全、StringBuffer线程安全。故StringBuilder效率更高。\r\n* 由于String是不可变的，所以String类型对象可以在编译期间得到优化，多个String对象可以共享同一个字符串值。这也是为什么下列程序的结果为`false true true`\r\n```\r\nString s1 = \"Programming\";\r\nString s2 = new String(\"Programming\");\r\nString s3 = \"Program\" + \"ming\";\r\nSystem.out.println(s1 == s2);  //false\r\nSystem.out.println(s1 == s3);  //true\r\nSystem.out.println(s1 == s1.intern());  //true  \r\n```\r\n## 12、String s = new String(\"xyz\");创建了几个字符串对象？\r\n两个对象，一个是静态区的\"xyz\"，一个是用new创建在堆上的对象。\r\n## 13、线程的sleep()方法和yield()方法有什么区别？\r\n① sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；\r\n② 线程执行sleep()方法后转入阻塞（blocked）状态，而执行yield()方法后转入就绪（ready）状态；\r\n③ sleep()方法声明抛出InterruptedException，而yield()方法没有声明任何异常；\r\n④ sleep()方法比yield()方法（跟操作系统CPU调度相关）具有更好的可移植性。\r\n## 14、sleep()方法和wait()方法的区别？\r\n* sleep()方法是`Thread`类的方法，wait() 方法是`Object`类的方法。\r\n* sleep() 不会释放对象锁，wait() 方法会释放对象锁。\r\n* sleep() 方法会抛出`InterruptedException`异常，wait()方法不会。\r\n> 补充：sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态）。wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。\r\n## 15、请说出与线程同步以及线程调度相关的方法？\r\n- wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；\r\n- sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常；\r\n- notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关；\r\n- notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；\r\n## 16、Java实现多线程的几种方式？\r\n 继承Thread类、实现Runnable接口、使用ExecutorService、Callable、Future实现有返回结果的多线程。\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}